name: Generate Infrastructure Diagram

on:
  push:
    branches:
      - main

jobs:
  generate-diagram:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y graphviz
          python -m pip install --upgrade pip
          pip install diagrams python-hcl2

      - name: Verificar archivos Terraform
        run: |
          echo "Verificando los archivos Terraform..."
          cd infra  # Navegar al directorio correcto
          if [ -d "." ]; then  # Verifica si existe el directorio actual
            echo "Archivos Terraform encontrados en infra:"
            find . -name "*.tf"  # Buscar archivos .tf en el directorio actual
          else
            echo "Error: El directorio 'infra' no existe."
            exit 1
          fi

      - name: Crear archivo Python temporal con el código
        run: |
          echo "
          import os
          import hcl2
          from diagrams import Diagram, Cluster, Node
          from diagrams.aws.compute import EC2
          from diagrams.aws.database import RDS
          from diagrams.aws.network import VPC
          
          # Diccionario para almacenar los recursos generados
          resources = {}
          
          # Diccionario que asocia tipos de recursos con clases de Diagrams
          resource_classes = {
              'aws_instance': EC2,
              'aws_db_instance': RDS,
              'aws_vpc': VPC,
              'aws_security_group': Node,  # Usar Node para representar como grupo de seguridad genérico
              'aws_subnet': Node,  # Usar Node para Subnet
          }
          
          # Crear o recuperar un recurso
          def create_or_get_resource(resource_type, name, diagram):
              key = f'{resource_type}_{name}'
              if key not in resources:
                  resource_class = resource_classes.get(resource_type, Node)  # Por defecto, usa Node si no está definido
                  resources[key] = resource_class(name)
              return resources[key]
          
          # Procesar todos los archivos Terraform en el directorio
          def process_terraform_files(terraform_dir, diagram):
              for root, _, files in os.walk(terraform_dir):
                  for file in files:
                      if file.endswith('.tf'):
                          file_path = os.path.join(root, file)
                          print(f'Procesando archivo Terraform: {file_path}')
                          with open(file_path, 'r') as f:
                              try:
                                  terraform_data = hcl2.load(f)
                                  process_resources(terraform_data, diagram)
                              except Exception as e:
                                  print(f'Error al procesar {file}: {e}')
          
          # Procesar los recursos definidos en un archivo Terraform
          def process_resources(terraform_data, diagram):
              if 'resource' not in terraform_data:
                  print('No se encontraron recursos en el archivo Terraform.')
                  return
              for resource in terraform_data['resource']:
                  for resource_type, instances in resource.items():
                      if resource_type not in resource_classes:
                          print(f'Tipo de recurso no soportado: {resource_type}')
                          continue
                      for instance_name, resource_details in instances.items():
                          print(f'Creando recurso: {instance_name}')
                          create_or_get_resource(resource_type, instance_name, diagram)
          
          # Generar el diagrama de infraestructura
          def generate_diagram():
              with Diagram('Infraestructura', show=False, outformat='png', filename='infra_diagram'):
                  with Cluster('VPC'):
                      # Crear el nodo de VPC con una etiqueta válida
                      vpc_instance = VPC('Virtual_Private_Cloud')
          
                      # Procesar los recursos definidos
                      for key, node in resources.items():
                          if 'aws_instance' in key:
                              ec2_instance = node
                              ec2_instance >> vpc_instance  # Relación EC2 -> VPC
                          elif 'aws_db_instance' in key:
                              rds_instance = node
                              rds_instance >> vpc_instance  # Relación RDS -> VPC
                          elif 'aws_security_group' in key:
                              sg_instance = node
                              sg_instance >> vpc_instance  # Relación SG -> VPC
                          elif 'aws_subnet' in key:
                              subnet_instance = node
                              subnet_instance >> vpc_instance  # Relación Subnet -> VPC
          
                      # Conectar instancias EC2 con RDS
                      for ec2_key, ec2_node in resources.items():
                          if 'aws_instance' in ec2_key:
                              for rds_key, rds_node in resources.items():
                                  if 'aws_db_instance' in rds_key:
                                      ec2_node >> rds_node  # Relación EC2 -> RDS
          
                      # Conectar grupos de seguridad a otros recursos
                      for sg_key, sg_node in resources.items():
                          if 'aws_security_group' in sg_key:
                              for rds_key, rds_node in resources.items():
                                  if 'aws_db_instance' in rds_key:
                                      sg_node >> rds_node  # Relación SG -> RDS
                              for ec2_key, ec2_node in resources.items():
                                  if 'aws_instance' in ec2_key:
                                      sg_node >> ec2_node  # Relación SG -> EC2


          if __name__ == '__main__':
              terraform_dir = 'infra'  # Directorio que contiene los archivos Terraform
              with Diagram('Infraestructura', show=False, outformat='png', filename='infra_diagram') as diagram:
                  process_terraform_files(terraform_dir, diagram)
                  generate_diagram()

          " > script.py





      - name: Ejecutar script Python para generar diagrama
        run: |
          python3 script.py
          echo "Diagrama generado con éxito."

      - name: Commit and Push Diagram
        run: |
          git config --local user.name "JesusHuallpa"
          git config --local user.email "jh2021071085@virtual.upt.pe"
          
          if [ -f "infra_diagram.png" ]; then
              git checkout diagramaTF || git checkout -b diagramaTF
              git add infra_diagram.png
              git commit -m "Actualizar diagrama de infraestructura [skip ci]" || echo "No hay cambios para commit"
              git push origin diagramaTF --force
          else
              echo "Error: infra_diagram.png no se generó."
              exit 1
          fi

      - name: Upload Diagram as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: infra_diagram
          path: infra_diagram.png
